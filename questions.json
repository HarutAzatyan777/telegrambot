{
 "html": [
    {
      "id": 1,
      "text": "Ո՞ր թեգն է օգտագործվում հղում ստեղծելու համար:",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<link>", "isCorrect": false },
        { "id": 2, "text": "<a>", "isCorrect": true },
        { "id": 3, "text": "<href>", "isCorrect": false },
        { "id": 4, "text": "<anchor>", "isCorrect": false }
      ]
    },
    {
      "id": 2,
      "text": "Ո՞ր թեգն է օգտագործվում պատկերի ներմուծման համար:",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<img>", "isCorrect": true },
        { "id": 2, "text": "<picture>", "isCorrect": false },
        { "id": 3, "text": "<media>", "isCorrect": false },
        { "id": 4, "text": "<graphic>", "isCorrect": false }
      ]
    },
    {
      "id": 3,
      "text": "Ո՞ր թեգն է <html>-ում, որը որոշում է փաստաթղթի վերնագիրը:",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<head>", "isCorrect": true },
        { "id": 2, "text": "<header>", "isCorrect": false },
        { "id": 3, "text": "<title>", "isCorrect": false },
        { "id": 4, "text": "<meta>", "isCorrect": false }
      ]
    },
    {
      "id": 4,
      "text": "Ո՞ր ատրիբուտն է օգտագործվում պատկերի այլընտրանքային տեքստը սահմանելու համար:",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "src", "isCorrect": false },
        { "id": 2, "text": "alt", "isCorrect": true },
        { "id": 3, "text": "title", "isCorrect": false },
        { "id": 4, "text": "href", "isCorrect": false }
      ]
    },
    {
      "id": 5,
      "text": "Ո՞ր ատրիբուտն է թույլ տալիս բացել հղումը նոր ներդիրում:",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "target=_blank", "isCorrect": true },
        { "id": 2, "text": "target=blank", "isCorrect": false },
        { "id": 3, "text": "target=_self", "isCorrect": false },
        { "id": 4, "text": "target=_new", "isCorrect": false }
      ]
    },
    {
      "id": 6,
      "text": "'placeholder' ատրիբուտն ինչի՞ համար է օգտագործվում:",
      "hasOptions": false,
      "answer": "'placeholder' ատրիբուտը օգտագործվում է ցուցադրելու տեքստային հուշում կամ մուտքագրման օրինակ, մինչ օգտատերը կսկսի մուտքագրել իր տվյալները:"
    },
    {
      "id": 7,
      "text": "Ինչպե՞ս ստեղծել անթվային ցուցակ HTML-ում:",
      "hasOptions": false,
      "answer": "Նման ցուցակ ստեղծելու համար HTML-ում օգտագործվում է <code>ul</code> թեգը, իսկ ցուցակի յուրաքանչյուր կետի համար՝ <code>li</code> թեգը:"
    },
    {
      "id": 8,
      "text": "Ի՞նչ է HTML-ը:",
      "hasOptions": false,
      "answer": "HTML (HyperText Markup Language) - սա ստանդարտացված նշագծման լեզու է, որն օգտագործվում է վեբ էջեր ստեղծելու և մշակելու համար: Դա համակարգ է, որը նշում է վեբ էջի առանձին մասերը, օգտագործելով անկյունային փակագծերում նշված թեգեր:"
    },
    {
      "id": 9,
      "text": "Ի՞նչ է անում <!DOCTYPE> թեգը:",
      "hasOptions": false,
      "answer": "Սա հայտարարություն է, որը տեղեկացնում է վեբ բրաուզերին նշագծման լեզվի տարբերակի մասին, որն օգտագործվել է վեբ էջի ստեղծման համար: Սա օգնում է բրաուզերին ճիշտ ցուցադրել էջը:"
    },
    {
      "id": 10,
      "text": "Ո՞ր թեգն է օգտագործվում աղյուսակ ստեղծելու համար:",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<table>", "isCorrect": true },
        { "id": 2, "text": "<grid>", "isCorrect": false },
        { "id": 3, "text": "<row>", "isCorrect": false },
        { "id": 4, "text": "<column>", "isCorrect": false }
      ]
    },
    {
      "id": 11,
      "text": "Ո՞ր թեգն է օգտագործվում աղյուսակի վերնագիր ստեղծելու համար:",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<caption>", "isCorrect": false },
        { "id": 2, "text": "<th>", "isCorrect": false },
        { "id": 3, "text": "<thead>", "isCorrect": true },
        { "id": 4, "text": "<title>", "isCorrect": false }
      ]
    },
    {
      "id": 12,
      "text": "Ո՞ր թեգն է օգտագործվում աղյուսակի տող ստեղծելու համար:",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<td>", "isCorrect": false },
        { "id": 2, "text": "<row>", "isCorrect": false },
        { "id": 3, "text": "<line>", "isCorrect": false },
        { "id": 4, "text": "<tr>", "isCorrect": true }
      ]
    },
    {
      "id": 13,
      "text": "Ո՞ր թեգն է օգտագործվում աղյուսակի բջիջ ստեղծելու համար:",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<cell>", "isCorrect": false },
        { "id": 2, "text": "<tr>", "isCorrect": false },
        { "id": 3, "text": "<th>", "isCorrect": false },
        { "id": 4, "text": "<td>", "isCorrect": true }
      ]
    },
    {
      "id": 14,
      "text": "Ի՞նչ են սեմանտիկ թեգերը HTML-ում:",
      "hasOptions": false,
      "answer": "HTML-ի սեմանտիկ թեգերը թեգեր են, որոնք տեղեկատվություն են հաղորդում բովանդակության իմաստի կամ նշանակության մասին, այլ ոչ թե միայն նրա արտաքին տեսքի մասին: Սեմանտիկ թեգերի օրինակներ՝ header, footer, article, section, nav և այլն: Դրանք օգնում են ստեղծել ավելի կառուցվածքային և հասանելի վեբ էջեր:"
    },
    {
      "id": 15,
      "text": "Ո՞ր ատրիբուտն է օգտագործվում ֆոնային պատկեր սահմանելու համար:",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "background", "isCorrect": false },
        { "id": 2, "text": "background-color", "isCorrect": false },
        { "id": 3, "text": "bgcolor", "isCorrect": false },
        { "id": 4, "text": "background-image", "isCorrect": true }
      ]
    },
    {
      "id": 16,
      "text": "Ո՞ր թեգն է օգտագործվում դուրս եկող ցուցակ ստեղծելու համար:",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<dropdown>", "isCorrect": false },
        { "id": 2, "text": "<list>", "isCorrect": false },
        { "id": 3, "text": "<select>", "isCorrect": true },
        { "id": 4, "text": "<option>", "isCorrect": false }
      ]
    },
    {
      "id": 17,
      "text": "Ո՞ր թեգն է օգտագործվում JavaScript կոդը HTML փաստաթղթում ներդնելու համար:",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<javascript>", "isCorrect": false },
        { "id": 2, "text": "<script>", "isCorrect": true },
        { "id": 3, "text": "<js>", "isCorrect": false },
        { "id": 4, "text": "<java>", "isCorrect": false }
      ]
    },
    {
      "id": 18,
      "text": "Ո՞ր ատրիբուտն է օգտագործվում պատկերի ճանապարհը սահմանելու համար:",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "src", "isCorrect": true },
        { "id": 2, "text": "href", "isCorrect": false },
        { "id": 3, "text": "path", "isCorrect": false },
        { "id": 4, "text": "url", "isCorrect": false }
      ]
    },
    {
      "id": 19,
      "text": "Ինչ է անում 'readonly' ատրիբուտը ձևի տարրում:",
      "hasOptions": false,
      "answer": "'readonly' ատրիբուտը դարձնում է ձևի տարրը միայն կարդալու համար, այսինքն՝ օգտատերը չի կարող փոփոխել տարրի արժեքը, բայց կարող է դիտել այն: Սա կարող է օգտակար լինել, եթե ցանկանում եք ցուցադրել տեղեկություն, որը չպետք է փոփոխվի:"
    },
    {
      "id": 20,
      "text": "Ի՞նչ են վեբ ստանդարտները և ինչու են դրանք անհրաժեշտ:",
      "hasOptions": false,
      "answer": "Վեբ ստանդարտները առաջարկություններ են, որոնք մշակվել են ստանդարտ խմբերի կողմից, ինչպիսիք են W3C-ը կամ WHATWG-ը, ապահովելու համար վեբ տեխնոլոգիաների համատեղելիությունը և կայունությունը: Դրանք ներառում են առաջարկություններ HTML-ի, CSS-ի, JavaScript-ի և այլ վեբ տեխնոլոգիաների վերաբերյալ: Վեբ ստանդարտներին համապատասխանելը օգնում է ապահովել վեբ էջերի ճիշտ աշխատանքը տարբեր բրաուզերներում և սարքերում, ինչպես նաև հեշտացնում է վեբ կայքերի սպասարկումը և ընդլայնումը ապագայում:"
    },
    {
      "id": 21,
      "text": "Ի՞նչ է պատասխանատու (responsive) վեբ դիզայնը:",
      "hasOptions": false,
      "answer": "Սա վեբ դիզայնի մոտեցում է, որը թույլ է տալիս վեբ էջերին ճիշտ ցուցադրվել և գործել տարբեր սարքերում, ներառյալ բջջային հեռախոսները, պլանշետները և աշխատասեղան համակարգիչները, օգտագործելով ճկուն դասավորություններ, ճկուն պատկերներ և CSS մեդիահարցումներ, որպեսզի դիզայնը հարմարեցվի տարբեր էկրանների չափերին և սարքավորումների հատկություններին:"
    },
    {
      "id": 22,
      "text": "Ո՞ր HTML թեգն է օգտագործվում տեսանյութ ներդնելու համար:",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<media>", "isCorrect": false },
        { "id": 2, "text": "<video>", "isCorrect": true },
        { "id": 3, "text": "<movie>", "isCorrect": false },
        { "id": 4, "text": "<multimedia>", "isCorrect": false }
      ]
    },
    {
      "id": 23,
      "text": "Ո՞ր թեգն է օգտագործվում գլխավոր վերնագիր ստեղծելու համար վեբ էջում:",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<h1>", "isCorrect": true },
        { "id": 2, "text": "<header>", "isCorrect": false },
        { "id": 3, "text": "<title>", "isCorrect": false },
        { "id": 4, "text": "<head>", "isCorrect": false }
      ]
    },
    {
      "id": 24,
      "text": "Ինչ է անում <br> թեգը:",
      "hasOptions": false,
      "answer": "Այն օգտագործվում է տողափոխության համար, ինչը թույլ է տալիս ստեղծել նոր տող այն տեղում, որտեղ այն տեղադրված է: Սա հարմար միջոց է տեքստի դասավորությունը կառավարելու համար վեբ էջում առանց լրացուցիչ ոճերի կամ տարրերի օգտագործման:"
    },
    {
      "id": 25,
      "text": "Ո՞ր թեգն է օգտագործվում կարգավորված ցուցակ ստեղծելու համար:",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<ul>", "isCorrect": false },
        { "id": 2, "text": "<ol>", "isCorrect": true },
        { "id": 3, "text": "<li>", "isCorrect": false },
        { "id": 4, "text": "<list>", "isCorrect": false }
      ]
    },
    {
      "id": 26,
      "text": "Ի՞նչ է DOM-ը վեբ ծրագրավորման համատեքստում:",
      "hasOptions": false,
      "answer": "DOM (Document Object Model) - սա ծրագրային միջերես է(интерфейс) վեբ փաստաթղթերի համար: Սա ներկայացնում է կառուցված փաստաթուղթը օբյեկտային մոդելի տեսքով, որը թույլ է տալիս ծրագրերին և սցենարներին փոխազդել վեբ էջի բովանդակության, կառուցվածքի և ոճերի հետ: DOM-ը փաստաթուղթը ներկայացնում է որպես ծառի օբյեկտներ, որոնցից յուրաքանչյուրը համապատասխանում է էջի մի մասին:"
    },
    {
      "id": 27,
      "text": "Ո՞ր ատրիբուտն է օգտագործվում էջի տարրի ոճերը սահմանելու համար:",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "style", "isCorrect": true },
        { "id": 2, "text": "css", "isCorrect": false },
        { "id": 3, "text": "styles", "isCorrect": false },
        { "id": 4, "text": "stylesheet", "isCorrect": false }
      ]
    },
    {
      "id": 28,
      "text": "Ի՞նչ է 'alt' ատրիբուտը <img> թեգում:",
      "hasOptions": false,
      "answer": "Այն օգտագործվում է այլընտրանքային տեքստ տրամադրելու համար, որը ցուցադրվելու է այն դեպքում, եթե պատկերը չի կարող բեռնվել: Սա կարող է նաև օգտակար լինել հասանելիության ապահովման համար, քանի որ էկրանի ընթերցիչները կարող են օգտագործել այս տեքստը՝ պատկերը սահմանափակ կարողություններ ունեցող օգտատերերին նկարագրելու համար:"
    }
  ],
  "css": [
    {
      "id": 1,
      "text": "Ինչպիսի՞ տարբերություն կա «reset»-ի և «normalize»-ի միջև CSS-ում: Ո՞րը կընտրեիք և ինչու՞:",
      "hasOptions": false,
      "answer": "Reset-ը (reset) զրոյացնում է բոլոր բրաուզերում ներկառուցված ոճերը: Normalize-ը բերում է ոճերը միասնական տեսքի բոլոր բրաուզերներում: Ավելի լավ է օգտագործել Normalize՝ շնորհիվ կրոսբրաուզերային համատեղելիության:"
    },
    {
      "id": 2,
      "text": "Ի՞նչ է CSS-ի ընտրիչների (selector) հատուկությունը և ինչպես է այն աշխատում:",
      "hasOptions": false,
      "answer": "Ընտրիչի հատուկությունը (կշիռը) դա այն հատկությունն է, որը որոշում է ոճային կանոնի առաջնահերթությունը, այսինքն՝ թե որ ոճը կկիրառվի HTML տարրի նկատմամբ ի վերջո: Օրինակ, օգտագործելով որևէ UI գրադարան, այդ գրադարանի տարրերի վրա կկիրառվեն հեղինակների կողմից կանխադրված կանոնները: Անհրաժեշտության դեպքում կարելի է փոխել ոճերը՝ ավելի հատուկ ընտրիչով «բացառելով» դեֆոլտայինները:\n\nԱվելին այստեղ՝ <a href='https://developer.mozilla.org/ru/docs/Web/CSS/Specificity' target='_blank'>Հատուկություն (MDN)</a>"
    },
    {
      "id": 3,
      "text": "Ի՞նչ է CSS-ը:",
      "hasOptions": false,
      "answer": "CSS (Cascading Style Sheets) - սա ոճային լեզու է, որն օգտագործվում է փաստաթղթի արտաքին տեսքը և ձևաչափումը նկարագրելու համար, որը գրված է նշագծման լեզվով, օրինակ՝ HTML: CSS-ը թույլ է տալիս մշակողներին կառավարել դասավորությունը, տառատեսակները, գույները և վեբ էջի այլ ստիլիստիկ ասպեկտները:"
    },
    {
      "id": 4,
      "text": "Ինչու՞ սովորաբար ավելի լավ է տեղադրել CSS-ի կապակցումը <head>-ում, իսկ <script>-ը՝ փակող </body> թեգի առաջ: Գիտե՞ք որևէ բացառություն, օրինակ բերեք:",
      "hasOptions": false,
      "answer": "Ստիլները խորհուրդ է տրվում կապակցել head-ում, որպեսզի էջը որքան հնարավոր է արագ ընդունի իր արտաքին տեսքը: Ստիլները head-ում կապակցելը կարող է դանդաղեցնել այս գործընթացը, դրա համար դրանք խորհուրդ է տրվում կապակցել փակող body թեգի առաջ: Բացառություն են կազմվում վերլուծական սկրիպտները՝ այցելուների քանակը որոշելու համար, որոնք չեն սպասել էջի բեռնմանը: Այդ դեպքում սկրիպտը պետք է կապակցել head-ում:"
    },
    {
      "id": 5,
      "text": "Ի՞նչ է անում 'z-index' հատկությունը CSS-ում:",
      "hasOptions": false,
      "answer": "'z-index' հատկությունը CSS-ում վերահսկում է տարրերի ստեկավոր հերթականությունը Z առանցքի վրա: Տարրը մեծ արժեք ունեցող 'z-index'-ով կցուցադրվի փոքր արժեք ունեցող տարրի վերևում:"
    },
    {
      "id": 6,
      "text": "Որո՞նք են div-ի կենտրոնացման եղանակները:",
      "hasOptions": false,
      "answer": "CSS-ում div-ի կենտրոնացման մի քանի եղանակներ կան, ահա դրանցից որոշները:\n1. Օգտագործելով margin և auto հատկությունները՝ `margin: 0 auto;`.\n2. Օգտագործելով Flexbox՝ `display: flex; justify-content: center; align-items: center;`.\n3. Օգտագործելով Grid Layout՝ `display: grid; place-items: center;`.\n4. Օգտագործելով text-align և inline-block հատկությունները՝ `text-align: center;` ծնող տարրի վրա և `display: inline-block;` հենց div-ի վրա:"
    },
    {
      "id": 7,
      "text": "Ո՞ր հատկությունն է օգտագործվում ֆոնի գույն սահմանելու համար:",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "color", "isCorrect": false },
        { "id": 2, "text": "background-color", "isCorrect": true },
        { "id": 3, "text": "bgcolor", "isCorrect": false },
        { "id": 4, "text": "background", "isCorrect": false }
      ]
    },
    {
      "id": 8,
      "text": "Ո՞ր հատկությունը թույլ է տալիս սահմանել տարրի արտաքին բացերը:",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "padding", "isCorrect": false },
        { "id": 2, "text": "border", "isCorrect": false },
        { "id": 3, "text": "margin", "isCorrect": true },
        { "id": 4, "text": "spacing", "isCorrect": false }
      ]
    },
    {
      "id": 9,
      "text": "Ո՞ր հատկությունն է օգտագործվում տառատեսակը սահմանելու համար:",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "font-weight", "isCorrect": false },
        { "id": 2, "text": "font-style", "isCorrect": false },
        { "id": 3, "text": "text-font", "isCorrect": false },
        { "id": 4, "text": "font-family", "isCorrect": true }
      ]
    },
    {
      "id": 10,
      "text": "Ո՞ր CSS հատկությունը թույլ է տալիս վերահսկել տարրի տեսանելիությունը DOM-ում, բայց պահպանում է նրա տեղը:",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "display: none", "isCorrect": false },
        { "id": 2, "text": "visibility: hidden", "isCorrect": true },
        { "id": 3, "text": "is-visible: 0", "isCorrect": false },
        { "id": 4, "text": "color: transparent", "isCorrect": false }
      ]
    },
    {
      "id": 11,
      "text": "Ո՞ր CSS հատկությունն է օգտագործվում տարրերի ստվերները սահմանելու համար:",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "box-shadow", "isCorrect": true },
        { "id": 2, "text": "text-shadow", "isCorrect": false },
        { "id": 3, "text": "shadow", "isCorrect": false },
        { "id": 4, "text": "border-shadow", "isCorrect": false }
      ]
    },
    {
      "id": 12,
      "text": "Ո՞ր ընտրիչը ընտրում է բոլոր .child տարրերը, որոնք անմիջական զավակ են .parent տարրին:",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": ".parent + .child", "isCorrect": false },
        { "id": 2, "text": ".parent ~ .child", "isCorrect": false },
        { "id": 3, "text": ".parent > .child", "isCorrect": true },
        { "id": 4, "text": ".parent .child", "isCorrect": false }
      ]
    },
    {
      "id": 13,
      "text": "Ո՞ր CSS ընտրիչը ընտրում է բոլոր տարրերը, որոնք ունեն նշված ատրիբուտը, որը սկսվում է որոշակի տողից:",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "[attr=value]", "isCorrect": false },
        { "id": 2, "text": "[attr~=value]", "isCorrect": false },
        { "id": 3, "text": "[attr|=value]", "isCorrect": false },
        { "id": 4, "text": "[attr^=value]", "isCorrect": true }
      ]
    },
    {
      "id": 14,
      "text": "Ո՞ր CSS ընտրիչը ընտրում է բոլոր տարրերը, որոնք ունեն նշված ատրիբուտը, որը ավարտվում է որոշակի տողից:",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "[attr=value]", "isCorrect": false },
        { "id": 2, "text": "[attr~=value]", "isCorrect": false },
        { "id": 3, "text": "[attr|=value]", "isCorrect": false },
        { "id": 4, "text": "[attr$=value]", "isCorrect": true }
      ]
    },
     {
      "id": 15,
      "text": "Ինչ է CSS-ի գոյանությունը `!important`-ը? Երբ երկու տիպերի հատկություններ հասնելի են համապատասխանաբար, ինչ կվանենք որպես առանձնահատկություն ընտրելու ժամանակաշրջանը և ինչ արագություն կստանանք։",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Դուք կնշանակեք, որ դա միայն առանձին դատարկիրը են կիրառվում", "isCorrect": false },
        { "id": 2, "text": "Դա նշանակում է, որ այս սահմանումը ունի բարձր կարգաբերակ", "isCorrect": true },
        { "id": 3, "text": "Դա նշանակում է, որ դա իրականում են դատարկիրը են կիրառվում", "isCorrect": false },
        { "id": 4, "text": "Դուք կնշանակեք, որ դա միայն առանձին դատարկիրը են կիրառվում", "isCorrect": false }
      ]
    },
     {
 "text": "Ինչ է բարձր շաբաթական շրջանառության իրականացումը և ինչպես է այն նույնպես ազդականում, եթե կոնտեյների անընդունելի էլեմենտը տարբեր բանաձևներում է մատուցվում?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Ազդականումը իրականացվում է որպես մակարդակի մեթոդ և ազդականումը, բարձր շաբաթական շրջանառության ընդհանուր այլ հատվածները", "isCorrect": false },
        { "id": 2, "text": "Ազդականումը կատարվում է որպես մակարդակի մեթոդ և ազդականումը բարձր շաբաթական շրջանառության ընդհանուր հատվածների վրա", "isCorrect": true },
        { "id": 3, "text": "Ազդականումը իրականացվում է որպես մակարդակի մեթոդ և ազդականումը բարձր շաբաթական շրջանառության հատվածների վրա", "isCorrect": false },
        { "id": 4, "text": "Ազդականումը իրականացվում է որպես մակարդակի մեթոդ և ազդականումը բարձր շաբաթական" }
      ]
    }

  ],
  "javascript": [
      {
      "id": 1,
      "text": "Ի՞նչ է չափազանց ֆունկցիան:",
      "hasOptions": false,
      "answer": "Սա է ֆունկցիա, որը վերադարձնում է նույն արդյունքը, երբ այն կանչվում է նույն արգումենտներով, որոնք չեն փոխվում, իսկ չունի կողմնակի արդյունքներ (side effects)"
    },
    {
      "id": 2,
      "text": "Ի՞նչ է փակում(закрытие):",
      "hasOptions": false,
      "answer": "Փակումները(закрытие) դա է ֆունկցիայի համարին հիշողության լեքսիկական միջոցով գտնվող վիրահատականն է, այսինքն, ունի հղում այս համակարգում և հետ կազմակերպում:"
    },
    {
      "id": 3,
      "text": "let VS const: ինչու ավելի լավ օգտագործել const, երբ սա հնարավոր է:",
      "hasOptions": false,
      "answer": "Օգտագործելով const տրամադրում է երկու բնապահպանություն՝\n1) Անվտանգությունը: const-ի հայտարարությունը պաշտպանում է փոփոխականի արժեքը չափանասանության փոփոխումից, որը հաճախորդը պահանջական է խնդիրների և անսպասելի վաշառումների։\n2) Մարդածախսությունը: const-ի օգտագործումը թույլ է տալիս կոդի ընթացքում ընթացավոր կարգավիճակը, որը այն դարձնում է ավելի հասարակական և մաքուր:"
    },
    {
      "id": 4,
      "text": "Ի՞նչ են Խոստումներ (Promises) -ը JavaScript-ում:",
      "hasOptions": false,
      "answer": "Խոստումները - սա են առաջարկում ասինխրոն գործողությունից արդյունավետ աշակերտային տեղեկատվականություն: Երբ մենք խնդիրներից ավելի կատարելու ենք հասանելի արժեքները միայն փոխանակումներին:"
    },
    {
      "id": 5,
      "text": "Ինչ է Destructuring JavaScript-ում?",
      "hasOptions": false,
      "answer": "Destructuring-ը թույլ է տալիս առանձնացնել առանձին հատկություններ առարկաներից կամ տարրերից զանգվածներից և դրանք վերագրել փոփոխականներին ավելի հարմար ձևով: Օրինակ, այսպես մենք կարող ենք մեկ տողով հանել օգտվողի անունը և հասցեն օբյեկտից user:\n<code>const {name, address} = user;</code>"
    },
    {
      "id": 6,
      "text": "Որոնք են սլաքների գործառույթները JavaScript-ում?",
      "hasOptions": false,
      "answer": "Սլաքների ֆունկցիաները շարահյուսական կոմպակտ ձև են JavaScript-ում ֆունկցիաներ գրելու, որոնք չունեն իրենց «սա»: Դրանք հաճախ օգտագործվում են անանուն գործառույթներ ստեղծելու համար.\n\n<a href='https://youtu.be/nGVYdna4kq4?si=1k0J9F-MYxWCaq6M' target='_blank'>Подробное видео про функции в JS</a>"
    },
    {
      "id": 7,
      "text": "Ինչ է hoisting в JavaScript?",
      "hasOptions": false,
      "answer": "Hoisting — Սա JavaScript-ի մեխանիզմ է, որի միջոցով փոփոխականները և ֆունկցիաների հայտարարագրերը տեղափոխվում են իրենց շրջանակի վերևում՝ նախքան ծածկագրի գործարկումը:"
    },
    {
      "id": 8,
      "text": "Ո՞ր մեթոդն է օգտագործվում զանգվածին տարր ավելացնելու համար:",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "splice()", "isCorrect": false },
        { "id": 2, "text": "pop()", "isCorrect": false },
        { "id": 3, "text": "shift()", "isCorrect": false },
        { "id": 4, "text": "push()", "isCorrect": true }
      ]
    },
    {
      "id": 9,
      "text": "Ո՞ր օբյեկտն է ներկայացնում բրաուզերի ընթացիկ պատուհանը:",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "document", "isCorrect": false },
        { "id": 2, "text": "screen", "isCorrect": false },
        { "id": 3, "text": "window", "isCorrect": true },
        { "id": 4, "text": "browser", "isCorrect": false }
      ]
    },
    {
      "id": 10,
      "text": "Ո՞ր օպերատորն է օգտագործվում խիստ հավասարության համեմատության համար:",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "==", "isCorrect": false },
        { "id": 2, "text": "===", "isCorrect": true },
        { "id": 3, "text": "=", "isCorrect": false },
        { "id": 4, "text": "!==", "isCorrect": false }
      ]
    },
    {
      "id": 11,
      "text": "Ո՞ր մեթոդն է օգտագործվում զանգվածից վերջին տարրը հեռացնելու համար:",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "splice()", "isCorrect": false },
        { "id": 2, "text": "pop()", "isCorrect": true },
        { "id": 3, "text": "shift()", "isCorrect": false },
        { "id": 4, "text": "push()", "isCorrect": false }
      ]
    },
    {
      "id": 12,
      "text": "JavaScript-ի ո՞ր մեթոդն է օգտագործվում օբյեկտը JSON տողի փոխարկելու համար:",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "JSON.stringify()", "isCorrect": true },
        { "id": 2, "text": "JSON.parse()", "isCorrect": false },
        { "id": 3, "text": "JSON.toText()", "isCorrect": false },
        { "id": 4, "text": "JSON.toString()", "isCorrect": false }
      ]
    },
    {
      "id": 13,
      "text": "JavaScript-ի ո՞ր օբյեկտն է օգտագործվում ամսաթվի և ժամի հետ աշխատելու համար:",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Time", "isCorrect": false },
        { "id": 2, "text": "Date", "isCorrect": true },
        { "id": 3, "text": "Calendar", "isCorrect": false },
        { "id": 4, "text": "DateTime", "isCorrect": false }
      ]
    },
    {
      "id": 14,
      "text": "JavaScript-ում զանգվածի ո՞ր մեթոդն է օգտագործվում որոշակի չափանիշի հիման վրա տարրերը զտելու համար:",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "map()", "isCorrect": false },
        { "id": 2, "text": "filter()", "isCorrect": true },
        { "id": 3, "text": "reduce()", "isCorrect": false },
        { "id": 4, "text": "forEach()", "isCorrect": false }
      ]
    }
  ],
  "react": [
    {
      "id": 1,
      "text": "Ի՞նչ է React JS-ը:",
      "hasOptions": false,
      "answer": "React JS-ը կամ պարզապես React-ը բաց կոդով JavaScript գրադարան է օգտատերերի միջերեսներ ստեղծելու համար, հատկապես մեկ էջի հավելվածների համար (SPA): React-ի հիմնական առանձնահատկությունները.\n1) Բաղադրիչների վրա հիմնված մոտեցում. React-ը կառուցված է բաղադրիչների գաղափարի վրա, որը թույլ է տալիս ծրագրավորողներին ստեղծել հեշտությամբ վերօգտագործվող կոդ;\n2) Վիրտուալ DOM. React-ն օգտագործում է վիրտուալ DOM՝ փոփոխությունները հետևելու համար: Սա իրական DOM-ի աբստրակցիա է, որը թույլ է տալիս գրադարանին թարմացնել ինտերֆեյսի միայն այն մասերը, որոնք իրականում փոխվել են՝ էջն ամբողջությամբ վերարտադրելու փոխարեն: Սա դարձնում է React-ը համեմատաբար արագ.\n3) Хуки: Введение хуков позволило использовать состояния и другие возможности классовых компонентов в функциональных компонентах, что сделало код более кратким и чистым;\n4) Сообщество и экосистема: React имеет большое и активное сообщество разработчиков, а также много библиотек и инструментов, созданных сообществом, что облегчает разработку сложных приложений.\n\nПодробнее: <a href='https://youtu.be/R_39q-vdOaE?si=mEKDaYDjEdnojG-N' target='_blank'>Введение в React (видео)</a>"
    },
    {
      "id": 2,
      "text": "Ինչի՞ համար է օգտագործվում հիմնական հատկանիշը ցուցակները ներկայացնելիս",
      "hasOptions": false,
      "answer": "Ստեղները օգնում են React-ին որոշել, թե որ տարրերն են փոխվել, ավելացվել կամ հեռացվել: Դրանք պետք է նշվեն, որպեսզի React-ը կարողանա ժամանակի ընթացքում համընկնել զանգվածի տարրերին: Բանալին ընտրելու լավագույն միջոցը հստակ տարբերակող տող օգտագործելն է: Հարևանների տարրերի ցանկը ձեր տվյալներից ID-ներն օգտագործելն է որպես բանալի, բայց միայն այն դեպքում, եթե զանգվածի տարրերը նախապես ավելացված, վերադասավորված կամ հեռացված չեն:"
    },
    {
      "id": 3,
      "text": "Ինչպե՞ս են աշխատում проп children?",
      "hasOptions": false,
      "answer": "Որոշ բաղադրիչներ նախապես չեն ճանաչում իրենց երեխաներին: Սա հատկապես ճիշտ է այնպիսի բաղադրիչների համար, ինչպիսիք են Sidebar-ը կամ Dialog-ը, որոնք նման են «արկղի», որտեղ կարող եք ինչ-որ բան տեղադրել: Նման բաղադրիչների համար կարող եք օգտագործել հատուկ օժանդակ երեխաներ, որոնք կփոխանցեն երեխայի տարրերը անմիջապես ելքին։\n\nԱվելի մանրամասն: <a href='https://react.dev/learn/passing-props-to-a-component#passing-jsx-as-children' target='_blank'>Документация React (eng)</a>"
    },
    {
      "id": 4,
      "text": "Ի՞նչ են պորտալները React-ում?",
      "hasOptions": false,
      "answer": "Պորտալները թույլ են տալիս վերարտադրել երեխայի տարրերը DOM հանգույցի վրա, որը գտնվում է մայր բաղադրիչի DOM հիերարխիայից դուրս: Պորտալների տիպիկ օգտագործման դեպքն այն է, երբ մայր բաղադրիչն ունի գերհոսք. թաքնված կամ z-ինդեքս ոճեր են սահմանված, բայց Դուք ցանկանում եք, որ երեխայի տարրը տեսողականորեն դուրս գա իր կոնտեյներով:"
    },
    {
      "id": 5,
      "text": "Ի՞նչ է հաշտեցումը (Cверка)?",
      "hasOptions": false,
      "answer": "Սա այն գործընթացն է, որով React-ը թարմացնում է DOM-ը: Երբ բաղադրիչի վիճակը փոխվում է, React-ը պետք է հաշվարկի արդյոք թարմացնել DOM-ը: Դա արվում է վիրտուալ DOM ստեղծելու և այն ներկայիս DOM-ի հետ համեմատելու միջոցով: այս համատեքստում վիրտուալ DOM-ը կպարունակի բաղադրիչի նոր վիճակը։"
    },
    {
      "id": 6,
      "text": "Ինչի՞ համար է React-ում օգտագործվում UseEffect hook-ը:",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Պահպանման բաղադրիչի վիճակը",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "Կողմնակի ազդեցությունների կատարում",
          "isCorrect": true
        },
        { "id": 3, "text": "Իմաստների մտապահում", "isCorrect": false },
        {
          "id": 4,
          "text": "DOM տարրերի հղումների ստեղծում",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 7,
      "text": "Ի՞նչ կլինի, եթե դատարկ զանգվածը փոխանցեք որպես երկրորդ արգումենտ useEffect-ի համար:[]?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Սխալ", "isCorrect": false },
        {
          "id": 2,
          "text": "useEffect կգործարկվի 0 անգամ",
          "isCorrect": false
        },
        { "id": 3, "text": "useEffect կգործարկվի 1 անգամ", "isCorrect": true },
        { "id": 4, "text": "Ճիշտ պատասխան չկա", "isCorrect": false }
      ]
    },
    {
      "id": 8,
      "text": "Ի՞նչ կեռիկ է օգտագործվում բաղադրիչում վիճակ ստեղծելու համար:",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "useEffect", "isCorrect": false },
        { "id": 2, "text": "useState", "isCorrect": true },
        { "id": 3, "text": "useContext", "isCorrect": false },
        { "id": 4, "text": "useReducer", "isCorrect": false }
      ]
    },
    {
      "id": 9,
      "text": "Ո՞ր տարրն է օգտագործվում տարրերը խմբավորելու համար՝ առանց DOM-ին լրացուցիչ հանգույցներ ավելացնելու:",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<Group>", "isCorrect": false },
        { "id": 2, "text": "<Div>", "isCorrect": false },
        { "id": 3, "text": "<Fragment> (<>)", "isCorrect": true },
        { "id": 4, "text": "<List>", "isCorrect": false }
      ]
    },
    {
      "id": 10,
      "text": "Մենք ունենք տողերով զանգված (arr), որոնցից յուրաքանչյուրը ցանկանում ենք արտացոլել էջում: Զանգվածի ո՞ր մեթոդը պետք է օգտագործվի բաղադրիչի վերադարձում:",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "{arr.forEach(...)}", "isCorrect": false },
        { "id": 2, "text": "{arr.filter(...)}", "isCorrect": false },
        { "id": 3, "text": "{arr.for(...)}", "isCorrect": false },
        { "id": 4, "text": "{arr.map(...)}", "isCorrect": true }
      ]
    },
    {
      "id": 11,
      "text": "Ո՞ր տարրն է օգտագործվում բաղադրիչի ծառի սխալները կարգավորելու համար:",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "ErrorBoundary", "isCorrect": true },
        { "id": 2, "text": "CatchError", "isCorrect": false },
        { "id": 3, "text": "ErrorWrapper", "isCorrect": false },
        { "id": 4, "text": "ErrorCatcher", "isCorrect": false }
      ]
    },
    {
      "id": 12,
      "text": "Ի՞նչ արգումենտ(ներ) է ընդունում useMemo կեռիկը:",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Գործառույթների և կախվածության զանգված", "isCorrect": true },
        { "id": 2, "text": "Գործառույթների և ընտրանքների օբյեկտ", "isCorrect": false },
        { "id": 3, "text": "Գործառույթ", "isCorrect": false },
        { "id": 4, "text": "Կախվածության զանգված", "isCorrect": false }
      ]
    },
    {
      "id": 13,
      "text": "Ինչի՞ համար է օգտագործվում React-ում օգտագործվող Callback կեռիկը:?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "DOM տարրերի հղումների ստեղծում",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "Բաղադրիչի վիճակի պահպանում",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "Կողմնակի ազդեցությունների կատարում",
          "isCorrect": false
        },
        { "id": 4, "text": "Հիշողության պահպանման գործառույթй", "isCorrect": true }
      ]
    }
  ],
  "reactnative": [
    {
      "id": 1,
      "text": "Ի՞նչ է React Native-ը:",
      "hasOptions": false,
      "answer": "React Native - JavaScript-ի և React-ի միջոցով բջջային հավելվածներ ստեղծելու շրջանակ է: Այն թույլ է տալիս ծրագրավորողներին օգտագործել React-ը Android և iOS պլատֆորմների բնիկ հնարավորությունների հետ մեկտեղ:"
    },
    {
      "id": 2,
      "text": "Ո՞ր բաղադրիչն է օգտագործվում React Native-ում տեքստը ցուցադրելու համար:",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "TextView", "isCorrect": false },
        { "id": 2, "text": "Text", "isCorrect": true },
        { "id": 3, "text": "Label", "isCorrect": false },
        { "id": 4, "text": "Span", "isCorrect": false }
      ]
    },
    {
      "id": 3,
      "text": "Ո՞ր բաղադրիչն է օգտագործվում React Native-ում կոճակ ստեղծելու համար:",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Button", "isCorrect": true },
        { "id": 2, "text": "TouchableOpacity", "isCorrect": false },
        { "id": 3, "text": "Pressable", "isCorrect": false },
        { "id": 4, "text": "All of the above", "isCorrect": true }
      ]
    },
    {
      "id": 4,
      "text": "Ի՞նչ է անում 'style' հատկանիշը(Атрибут) React Native բաղադրիչներում",
      "hasOptions": false,
      "answer": "հատկանիշը(Атрибут) 'style'օգտագործվում է բաղադրիչների ոճերը սահմանելու համար, ինչպիսիք են գույնը, չափերը, լիցքավորումը և CSS-ի նմանվող այլ հատկություններ:"
    },
    {
      "id": 5,
      "text": "Ո՞ր մեթոդն է օգտագործվում նոր React Native նախագիծ ստեղծելու համար:",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "react-native init", "isCorrect": true },
        { "id": 2, "text": "react-native new", "isCorrect": false },
        { "id": 3, "text": "react-native create", "isCorrect": false },
        { "id": 4, "text": "react-native generate", "isCorrect": false }
      ]
    },
    {
      "id": 6,
      "text": "Ի՞նչ է անում <View> բաղադրիչը React Native-ում:",
      "hasOptions": false,
      "answer": "<View> բաղադրիչն օգտագործվում է որպես կոնտեյներ այլ բաղադրիչների և ինտերֆեյսի տարրերի, ինչպես նաև ոճավորման և դասավորության վերահսկման համար։"
    },
    {
      "id": 7,
      "text": "Ո՞ր բաղադրիչն է օգտագործվում React Native-ում տարրերի պտտվող ցանկ ստեղծելու համար?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "FlatList", "isCorrect": true },
        { "id": 2, "text": "ScrollView", "isCorrect": false },
        { "id": 3, "text": "SectionList", "isCorrect": false },
        { "id": 4, "text": "ListView", "isCorrect": false }
      ]
    },
    {
      "id": 8,
      "text": "Ի՞նչ է անում բաղադրիչը(компонент) <TouchableOpacity>?",
      "hasOptions": false,
      "answer": "բաղադրիչը(Компонент) <TouchableOpacity> օգտագործվում է տարրեր ստեղծելու համար, որոնք արձագանքում են կտտոցներին և փոխում են դրանց անթափանցիկությունը օգտատիրոջ հետ շփվելու դեպքում:"
    },
    {
      "id": 9,
      "text": "Ո՞ր մեթոդն է օգտագործվում React Native նախագիծը Android-ում գործարկելու համար:",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "react-native run-android", "isCorrect": true },
        { "id": 2, "text": "react-native start-android", "isCorrect": false },
        { "id": 3, "text": "react-native build-android", "isCorrect": false },
        { "id": 4, "text": "react-native deploy-android", "isCorrect": false }
      ]
    },
    {
      "id": 10,
      "text": "Ո՞ր բաղադրիչն է օգտագործվում React Native-ում պատկերներ ստեղծելու համար:",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Picture", "isCorrect": false },
        { "id": 2, "text": "Image", "isCorrect": true },
        { "id": 3, "text": "Photo", "isCorrect": false },
        { "id": 4, "text": "Img", "isCorrect": false }
      ]
    },
    {
      "id": 11,
      "text": "Ո՞ր բաղադրիչն է օգտագործվում React Native-ում էկրանների միջև նավարկելու համար:",
      "hasOptions": false,
      "answer": "Էկրանների միջև նավարկելու համար React Native-ն օգտագործում է React Navigation գրադարանը, որն ապահովում է նավիգացիոն տարբեր բաղադրիչներ և գործառույթներ:"
    },
    {
      "id": 12,
      "text": "Ի՞նչ է անում բաղադրիչը(компонент) <FlatList>?",
      "hasOptions": false,
      "answer": "Բաղադրիչը(компонент <FlatList> օգտագործվում է մեծ թվով տարրեր ցուցադրելու համար օպտիմիզացված տվյալների ոլորվող ցանկը ցուցադրելու համար:"
    },
    {
      "id": 13,
      "text": "Ո՞ր մեթոդն է օգտագործվում React Native նախագիծը iOS-ում գործարկելու համար:",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "react-native run-ios", "isCorrect": true },
        { "id": 2, "text": "react-native start-ios", "isCorrect": false },
        { "id": 3, "text": "react-native build-ios", "isCorrect": false },
        { "id": 4, "text": "react-native deploy-ios", "isCorrect": false }
      ]
    },
    {
      "id": 14,
      "text": "Ի՞նչ է Flexbox-ը React Native-ում:",
      "hasOptions": false,
      "answer": "Flexbox - դասավորության համակարգ է, որն օգտագործվում է React Native-ում՝ կոնտեյների ներսում բաղադրիչների տեղակայումն ու դասավորվածությունը վերահսկելու համար: Այն թույլ է տալիս ստեղծել ճկուն և հարմարվողական դասավորություններ:"
    },
    {
      "id": 15,
      "text": "Ո՞ր բաղադրիչն է (компонент) օգտագործվում React Native-ում տեքստի մուտքագրման համար:",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "TextField", "isCorrect": false },
        { "id": 2, "text": "TextInput", "isCorrect": true },
        { "id": 3, "text": "Input", "isCorrect": false },
        { "id": 4, "text": "TextArea", "isCorrect": false }
      ]
    },
    {
      "id": 16,
      "text": "Ի՞նչ է անում setState() մեթոդը React Native-ում:",
      "hasOptions": false,
      "answer": "SetState() մեթոդն օգտագործվում է բաղադրիչի վիճակը թարմացնելու և բաղադրիչը նոր վիճակով վերարտադրելու համար:"
    },
    {
      "id": 17,
      "text": "Ո՞ր բաղադրիչն է օգտագործվում React Native-ում բեռնման ցուցիչ ցուցադրելու համար:",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "LoadingIndicator", "isCorrect": false },
        { "id": 2, "text": "Spinner", "isCorrect": false },
        { "id": 3, "text": "ActivityIndicator", "isCorrect": true },
        { "id": 4, "text": "ProgressBar", "isCorrect": false }
      ]
    },
    {
      "id": 18,
      "text": "Որո՞նք են ռեակտիվները React Native-ում:",
      "hasOptions": false,
      "answer": "Props (свойства) - այն օբյեկտ է, որն օգտագործվում է տվյալներ և կոնֆիգուրացիաներ մայր բաղադրիչից երեխայի բաղադրիչ փոխանցելու համար: Հենակետերը թույլ են տալիս բաղադրիչները լինել ավելի ճկուն և բազմակի օգտագործման համար"
    },
    {
      "id": 19,
      "text": "Ի՞նչ է անում componentDidMount() մեթոդը React Native-ում:",
      "hasOptions": false,
      "answer": "componentDidMount() մեթոդը կանչվում է բաղադրիչը DOM-ում տեղադրվելուց հետո: Սա լավ վայր է API հարցումներ կատարելու կամ բաժանորդագրություններ ստեղծելու համար:"
    },
    {
      "id": 20,
      "text": "Ի՞նչ կեռիկ է (хук) օգտագործվում React Native ֆունկցիոնալ բաղադրիչներում state-ի հետ աշխատելու համար:",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "useEffect", "isCorrect": false },
        { "id": 2, "text": "useState", "isCorrect": true },
        { "id": 3, "text": "useContext", "isCorrect": false },
        { "id": 4, "text": "useReducer", "isCorrect": false }
      ]
    },
    {
      "id": 21,
      "text": "Ի՞նչ է անում forceUpdate() մեթոդը React Native-ում:",
      "hasOptions": false,
      "answer": "ForceUpdate() մեթոդը ստիպում է բաղադրիչը վերաարտադրել՝ անկախ նրանից, թե բաղադրիչի վիճակը կամ հատկությունները փոխվել են։ Այն պետք է օգտագործվի զգուշությամբ:"
    },
    {
      "id": 22,
      "text": "Ո՞ր բաղադրիչն է օգտագործվում React Native-ում անջատիչ անջատիչ ստեղծելու համար:",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Switch", "isCorrect": true },
        { "id": 2, "text": "Toggle", "isCorrect": false },
        { "id": 3, "text": "Checkbox", "isCorrect": false },
        { "id": 4, "text": "RadioButton", "isCorrect": false }
      ]
    },
    {
      "id": 23,
      "text": "Ի՞նչ է անում <SafeAreaView> բաղադրիչը React Native-ում:",
      "hasOptions": false,
      "answer": "<SafeAreaView> բաղադրիչն օգտագործվում է կոնտեյներ ստեղծելու համար, որն ավտոմատ կերպով հարգում է էկրանի անվտանգ հատվածները, ինչպիսիք են կտրվածքները և կլորացված անկյունները, որպեսզի կանխի բովանդակության արգելափակումը համակարգի տարրերի կողմից:"
    },
    {
      "id": 24,
      "text": "Ո՞ր մեթոդն է օգտագործվում React Native դասի բաղադրիչներում բաղադրիչի վիճակը թարմացնելու համար:",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "updateState", "isCorrect": false },
        { "id": 2, "text": "setState", "isCorrect": true },
        { "id": 3, "text": "refreshState", "isCorrect": false },
        { "id": 4, "text": "changeState", "isCorrect": false }
      ]
    },
    {
      "id": 25,
      "text": "Ի՞նչ է անում render() մեթոդը React Native-ում:",
      "hasOptions": false,
      "answer": "Render() մեթոդը օգտագործվում է նկարագրելու համար, թե ինչ պետք է ցուցադրվի էկրանին: Այն վերադարձնում է JSX նշում, որը սահմանում է բաղադրիչի կառուցվածքը և բովանդակությունը:"
    }
  ]
}
